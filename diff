diff --git a/teslafi-poly.py b/teslafi-poly.py
index 37ed0b7..65a2d38 100755
--- a/teslafi-poly.py
+++ b/teslafi-poly.py
@@ -19,10 +19,10 @@ _PARM_API_KEY_NAME = "API_KEY"
 def pollTeslaFi(self):
         url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f'
         LOGGER.info('shortPoll - going to check TeslaFi API @ {}'.format(url))
-        r = requests.get(url)
-        LOGGER.debug('r     = {}'.format(r.json()))
-        rJSON = r.json()
-        # rJSON = json.loads('{ "data_id": 241401, "Date": "2020-06-29 14:40:20", "calendar_enabled": "1", "remote_start_enabled": "", "vehicle_id": "1398025120", "display_name": "Cookie Monster", "color": null, "fast_charger_brand": "<invalid>", "notifications_enabled": "", "vin": "5YJ3E1EB2LF649898", "conn_charge_cable": "SAE", "id": "9467099876517145", "charge_port_cold_weather_mode": "0", "id_s": null, "state": "online", "option_codes": "AD15,MDL3,PBSB,RENA,BT37,ID3W,RF3G,S3PB,DRLH,DV2W,", "user_charge_enable_request": null, "time_to_full_charge": "0.0", "charge_current_request": "32", "charge_enable_request": "0", "charge_to_max_range": "0", "charger_phases": null, "battery_heater_on": "0", "managed_charging_start_time": null, "battery_range": "180.36", "charger_power": "0", "charge_limit_soc": "50", "charger_pilot_current": "48", "charge_port_latch": "Engaged", "battery_current": "", "charger_actual_current": "0", "scheduled_charging_pending": "0", "fast_charger_type": "ACSingleWireCAN", "usable_battery_level": "58", "motorized_charge_port": "1", "charge_limit_soc_std": "90", "not_enough_power_to_heat": null, "battery_level": "58", "charge_energy_added": "0.0", "charge_port_door_open": "1", "max_range_charge_counter": "0", "charge_limit_soc_max": "100", "ideal_battery_range": "180.36", "managed_charging_active": "0", "charging_state": "Complete", "fast_charger_present": "0", "trip_charging": "0", "managed_charging_user_canceled": "0", "scheduled_charging_start_time": "1593501300", "est_battery_range": "161.2", "charge_rate": "0.0", "charger_voltage": "2", "charge_current_request_max": "48", "eu_vehicle": "0", "charge_miles_added_ideal": "0.0", "charge_limit_soc_min": "50", "charge_miles_added_rated": "0.0", "inside_temp": "24.5", "longitude": "-118.152688", "heading": "179", "gps_as_of": "1593464769", "latitude": "33.794724", "speed": null, "shift_state": null, "seat_heater_rear_right": "0", "seat_heater_rear_left_back": "", "seat_heater_left": "0", "passenger_temp_setting": "22.2", "is_auto_conditioning_on": "0", "driver_temp_setting": "22.2", "outside_temp": "24.5", "seat_heater_rear_center": "0", "is_rear_defroster_on": "0", "seat_heater_rear_right_back": "", "smart_preconditioning": "", "seat_heater_right": "0", "fan_status": "0", "is_front_defroster_on": "0", "seat_heater_rear_left": "0", "gui_charge_rate_units": null, "gui_24_hour_time": null, "gui_temperature_units": null, "gui_range_display": null, "gui_distance_units": null, "sun_roof_installed": null, "rhd": "0", "remote_start_supported": "1", "homelink_nearby": "1", "parsed_calendar_supported": "1", "spoiler_type": "None", "ft": "0", "odometer": "4556.911604", "remote_start": "0", "pr": "0", "climate_keeper_mode": "off", "roof_color": "Glass", "perf_config": "", "valet_mode": "0", "calendar_supported": "1", "pf": "0", "sun_roof_percent_open": "", "third_row_seats": "<invalid>", "seat_type": null, "api_version": "8", "rear_seat_heaters": "1", "rt": "0", "exterior_color": "DeepBlue", "df": "0", "autopark_state": "standby", "sun_roof_state": "", "notifications_supported": "1", "vehicle_name": "Cookie Monster", "dr": "0", "autopark_style": null, "car_type": "model", "wheel_type": "Pinwheel18", "locked": "1", "center_display_state": "0", "last_autopark_error": null, "car_version": "2020.24.6.1 eefccf85", "defrost_mode": "0", "autopark_state_v2": null, "is_preconditioning": "0", "inside_tempF": "76", "driver_temp_settingF": "71", "outside_tempF": "76", "battery_heater": "", "Notes": "TeslaFi Sleep Mode Sleep Attempt", "odometerF": "None", "idleNumber": 1557, "sleepNumber": 0, "driveNumber": 0, "chargeNumber": 0, "polling": "False", "idleTime": -25, "maxRange": "316.79", "left_temp_direction": "414", "max_avail_temp": "28.0", "is_climate_on": "0", "right_temp_direction": "414", "min_avail_temp": "15.0", "is_user_present": "0", "in_service": "0", "valet_pin_needed": null, "charge_port_led_color": "", "timestamp": null, "power": "0", "side_mirror_heaters": "", "wiper_blade_heater": "", "steering_wheel_heater": "", "elevation": "", "sentry_mode": "0", "fd_window": "0", "fp_window": "0", "rd_window": "0", "rp_window": "0", "measure": "imperial", "temperature": "F", "currency": "$", "carState": "Sleeping", "location": "Home", "rangeDisplay": "rated" }')
+        # r = requests.get(url)
+        # LOGGER.debug('r     = {}'.format(r.json()))
+        # rJSON = r.json()
+        rJSON = json.loads('{ "data_id": 241401, "Date": "2020-06-29 14:40:20", "calendar_enabled": "1", "remote_start_enabled": "", "vehicle_id": "1398025120", "display_name": "Cookie Monster", "color": null, "fast_charger_brand": "<invalid>", "notifications_enabled": "", "vin": "5YJ3E1EB2LF649898", "conn_charge_cable": "SAE", "id": "9467099876517145", "charge_port_cold_weather_mode": "0", "id_s": null, "state": "online", "option_codes": "AD15,MDL3,PBSB,RENA,BT37,ID3W,RF3G,S3PB,DRLH,DV2W,", "user_charge_enable_request": null, "time_to_full_charge": "0.0", "charge_current_request": "32", "charge_enable_request": "0", "charge_to_max_range": "0", "charger_phases": null, "battery_heater_on": "0", "managed_charging_start_time": null, "battery_range": "180.36", "charger_power": "0", "charge_limit_soc": "50", "charger_pilot_current": "48", "charge_port_latch": "Engaged", "battery_current": "", "charger_actual_current": "0", "scheduled_charging_pending": "0", "fast_charger_type": "ACSingleWireCAN", "usable_battery_level": "58", "motorized_charge_port": "1", "charge_limit_soc_std": "90", "not_enough_power_to_heat": null, "battery_level": "58", "charge_energy_added": "0.0", "charge_port_door_open": "1", "max_range_charge_counter": "0", "charge_limit_soc_max": "100", "ideal_battery_range": "180.36", "managed_charging_active": "0", "charging_state": "Complete", "fast_charger_present": "0", "trip_charging": "0", "managed_charging_user_canceled": "0", "scheduled_charging_start_time": "1593501300", "est_battery_range": "161.2", "charge_rate": "0.0", "charger_voltage": "2", "charge_current_request_max": "48", "eu_vehicle": "0", "charge_miles_added_ideal": "0.0", "charge_limit_soc_min": "50", "charge_miles_added_rated": "0.0", "inside_temp": "24.5", "longitude": "-118.152688", "heading": "179", "gps_as_of": "1593464769", "latitude": "33.794724", "speed": null, "shift_state": null, "seat_heater_rear_right": "0", "seat_heater_rear_left_back": "", "seat_heater_left": "0", "passenger_temp_setting": "22.2", "is_auto_conditioning_on": "0", "driver_temp_setting": "22.2", "outside_temp": "24.5", "seat_heater_rear_center": "0", "is_rear_defroster_on": "0", "seat_heater_rear_right_back": "", "smart_preconditioning": "", "seat_heater_right": "0", "fan_status": "0", "is_front_defroster_on": "0", "seat_heater_rear_left": "0", "gui_charge_rate_units": null, "gui_24_hour_time": null, "gui_temperature_units": null, "gui_range_display": null, "gui_distance_units": null, "sun_roof_installed": null, "rhd": "0", "remote_start_supported": "1", "homelink_nearby": "1", "parsed_calendar_supported": "1", "spoiler_type": "None", "ft": "0", "odometer": "4556.911604", "remote_start": "0", "pr": "0", "climate_keeper_mode": "off", "roof_color": "Glass", "perf_config": "", "valet_mode": "0", "calendar_supported": "1", "pf": "0", "sun_roof_percent_open": "", "third_row_seats": "<invalid>", "seat_type": null, "api_version": "8", "rear_seat_heaters": "1", "rt": "0", "exterior_color": "DeepBlue", "df": "0", "autopark_state": "standby", "sun_roof_state": "", "notifications_supported": "1", "vehicle_name": "Cookie Monster", "dr": "0", "autopark_style": null, "car_type": "model", "wheel_type": "Pinwheel18", "locked": "1", "center_display_state": "0", "last_autopark_error": null, "car_version": "2020.24.6.1 eefccf85", "defrost_mode": "0", "autopark_state_v2": null, "is_preconditioning": "0", "inside_tempF": "76", "driver_temp_settingF": "71", "outside_tempF": "76", "battery_heater": "", "Notes": "TeslaFi Sleep Mode Sleep Attempt", "odometerF": "None", "idleNumber": 1557, "sleepNumber": 0, "driveNumber": 0, "chargeNumber": 0, "polling": "False", "idleTime": -25, "maxRange": "316.79", "left_temp_direction": "414", "max_avail_temp": "28.0", "is_climate_on": "0", "right_temp_direction": "414", "min_avail_temp": "15.0", "is_user_present": "0", "in_service": "0", "valet_pin_needed": null, "charge_port_led_color": "", "timestamp": null, "power": "0", "side_mirror_heaters": "", "wiper_blade_heater": "", "steering_wheel_heater": "", "elevation": "", "sentry_mode": "0", "fd_window": "0", "fp_window": "0", "rd_window": "0", "rp_window": "0", "measure": "imperial", "temperature": "F", "currency": "$", "carState": "Sleeping", "location": "Home", "rangeDisplay": "rated" }')
         LOGGER.debug('rJSON = {}'.format(rJSON))
 
         # get car id (for node addr) & trim the carName to be only 6 characters
@@ -47,14 +47,15 @@ def pollTeslaFi(self):
         # set node values
         if carState == 'Sleeping':
           LOGGER.debug('Setting car to asleep (0)')
-          self.nodes[carID].setDriver('GV0', 0)
+          self.setDriver('GV0', 0)
         else:
           LOGGER.debug('Setting car to awake (1)')
-          self.nodes[carID].setDriver('GV0', 1)
-        self.nodes[carID].setDriver('GV1', usable_battery_level)
-        self.nodes[carID].setDriver('GV2', est_battery_range)
-        self.nodes[carID].setDriver('GV3', charge_limit_soc)
-        self.nodes[carID].setDriver('GV4', ideal_battery_range)
+          self.setDriver('GV0', 1)
+        self.setDriver('SV1', usable_battery_level)
+        self.setDriver('GV2', est_battery_range)
+        self.setDriver('GV3', charge_limit_soc)
+        self.setDriver('GV4', ideal_battery_range)
+        LOGGER.debug('Done setting drivers')
         return
 
 class Controller(polyinterface.Controller):
@@ -75,6 +76,7 @@ class Controller(polyinterface.Controller):
         self.check_params()
         self.discover()
         self.poly.add_custom_config_docs("")
+        # self.poly.installprofile()
 
     def shortPoll(self):
         pollTeslaFi(self)
@@ -92,18 +94,18 @@ class Controller(polyinterface.Controller):
     def discover(self, *args, **kwargs):
         url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f'
         LOGGER.info('shortPoll - going to check TeslaFi API @ {}'.format(url))
-        r = requests.get(url)
-        LOGGER.debug('r     = {}'.format(r.json()))
-        rJSON = r.json()
+        # r = requests.get(url)
+        # LOGGER.debug('r     = {}'.format(r.json()))
+        # rJSON = r.json()
         # rJSON = json.loads('{ "data_id": 241401, "Date": "2020-06-29 14:40:20", "calendar_enabled": "1", "remote_start_enabled": "", "vehicle_id": "1398025120", "display_name": "Cookie Monster", "color": null, "fast_charger_brand": "<invalid>", "notifications_enabled": "", "vin": "5YJ3E1EB2LF649898", "conn_charge_cable": "SAE", "id": "9467099876517145", "charge_port_cold_weather_mode": "0", "id_s": null, "state": "online", "option_codes": "AD15,MDL3,PBSB,RENA,BT37,ID3W,RF3G,S3PB,DRLH,DV2W,", "user_charge_enable_request": null, "time_to_full_charge": "0.0", "charge_current_request": "32", "charge_enable_request": "0", "charge_to_max_range": "0", "charger_phases": null, "battery_heater_on": "0", "managed_charging_start_time": null, "battery_range": "180.36", "charger_power": "0", "charge_limit_soc": "50", "charger_pilot_current": "48", "charge_port_latch": "Engaged", "battery_current": "", "charger_actual_current": "0", "scheduled_charging_pending": "0", "fast_charger_type": "ACSingleWireCAN", "usable_battery_level": "58", "motorized_charge_port": "1", "charge_limit_soc_std": "90", "not_enough_power_to_heat": null, "battery_level": "58", "charge_energy_added": "0.0", "charge_port_door_open": "1", "max_range_charge_counter": "0", "charge_limit_soc_max": "100", "ideal_battery_range": "180.36", "managed_charging_active": "0", "charging_state": "Complete", "fast_charger_present": "0", "trip_charging": "0", "managed_charging_user_canceled": "0", "scheduled_charging_start_time": "1593501300", "est_battery_range": "161.2", "charge_rate": "0.0", "charger_voltage": "2", "charge_current_request_max": "48", "eu_vehicle": "0", "charge_miles_added_ideal": "0.0", "charge_limit_soc_min": "50", "charge_miles_added_rated": "0.0", "inside_temp": "24.5", "longitude": "-118.152688", "heading": "179", "gps_as_of": "1593464769", "latitude": "33.794724", "speed": null, "shift_state": null, "seat_heater_rear_right": "0", "seat_heater_rear_left_back": "", "seat_heater_left": "0", "passenger_temp_setting": "22.2", "is_auto_conditioning_on": "0", "driver_temp_setting": "22.2", "outside_temp": "24.5", "seat_heater_rear_center": "0", "is_rear_defroster_on": "0", "seat_heater_rear_right_back": "", "smart_preconditioning": "", "seat_heater_right": "0", "fan_status": "0", "is_front_defroster_on": "0", "seat_heater_rear_left": "0", "gui_charge_rate_units": null, "gui_24_hour_time": null, "gui_temperature_units": null, "gui_range_display": null, "gui_distance_units": null, "sun_roof_installed": null, "rhd": "0", "remote_start_supported": "1", "homelink_nearby": "1", "parsed_calendar_supported": "1", "spoiler_type": "None", "ft": "0", "odometer": "4556.911604", "remote_start": "0", "pr": "0", "climate_keeper_mode": "off", "roof_color": "Glass", "perf_config": "", "valet_mode": "0", "calendar_supported": "1", "pf": "0", "sun_roof_percent_open": "", "third_row_seats": "<invalid>", "seat_type": null, "api_version": "8", "rear_seat_heaters": "1", "rt": "0", "exterior_color": "DeepBlue", "df": "0", "autopark_state": "standby", "sun_roof_state": "", "notifications_supported": "1", "vehicle_name": "Cookie Monster", "dr": "0", "autopark_style": null, "car_type": "model", "wheel_type": "Pinwheel18", "locked": "1", "center_display_state": "0", "last_autopark_error": null, "car_version": "2020.24.6.1 eefccf85", "defrost_mode": "0", "autopark_state_v2": null, "is_preconditioning": "0", "inside_tempF": "76", "driver_temp_settingF": "71", "outside_tempF": "76", "battery_heater": "", "Notes": "TeslaFi Sleep Mode Sleep Attempt", "odometerF": "None", "idleNumber": 1557, "sleepNumber": 0, "driveNumber": 0, "chargeNumber": 0, "polling": "False", "idleTime": -25, "maxRange": "316.79", "left_temp_direction": "414", "max_avail_temp": "28.0", "is_climate_on": "0", "right_temp_direction": "414", "min_avail_temp": "15.0", "is_user_present": "0", "in_service": "0", "valet_pin_needed": null, "charge_port_led_color": "", "timestamp": null, "power": "0", "side_mirror_heaters": "", "wiper_blade_heater": "", "steering_wheel_heater": "", "elevation": "", "sentry_mode": "0", "fd_window": "0", "fp_window": "0", "rd_window": "0", "rp_window": "0", "measure": "imperial", "temperature": "F", "currency": "$", "carState": "Sleeping", "location": "Home", "rangeDisplay": "rated" }')
-        LOGGER.debug('rJSON = {}'.format(rJSON))
-        carID = rJSON['id']
+        # LOGGER.debug('rJSON = {}'.format(rJSON))
+        # carID = rJSON['id']
 
         # trim the carName to be only 6 characters
-        carID = carID[-5:]
+        # carID = carID[-5:]
 
-        carName = rJSON['display_name']
-        self.addNode(VehicleNode(self, self.address, carID, carName))
+        # carName = rJSON['display_name']
+        # self.addNode(VehicleNode(self, self.address, carID, carName))
         
         return
           
@@ -133,7 +135,6 @@ class Controller(polyinterface.Controller):
 
     def check_params(self):
         default_api_key = "ABCDEFG"
-        default_numvehicles = 1
         self.removeNoticesAll()
 
         if 'DebugLevel' in self.polyConfig['customParams']:
@@ -178,30 +179,10 @@ class Controller(polyinterface.Controller):
             self.addNotice('Set \'API_KEY\' and then restart')
             st = False
 
-        if 'NumVehicles' in self.polyConfig['customParams']:
-            LOGGER.debug('NumVehicles found in customParams')
-            self.NumVehicles = self.polyConfig['customParams']['NumVehicles']
-            LOGGER.debug('check_params: NumVehicles is: {}'.format(self.NumVehicles))
-            if self.NumVehicles == '':
-                LOGGER.debug('check_params: NumVehicles is empty')
-                self.NumVehicles = default_numvehicles
-                LOGGER.debug('check_params: NumVehicles is defined in customParams, but is blank - please update it.  Using {}'.format(self.NumVehicles))
-                self.addNotice('Set \'NumVehicles\' and then restart')
-                st = False
-        else:
-            LOGGER.debug('check_params: NumVehicles does not exist self.polyCconfig: {}'.format(self.polyConfig))
-            self.NumVehicles = default_numvehicles
-            LOGGER.debug('check_params: NumVehicles not defined in customParams, please update it.  Using {}'.format(self.NumVehicles))
-            self.addNotice('Set \'NumVehicles\' and then restart')
-            st = False
-
-        if self.NumVehicles == 0:
-            self.addNotice('Set \'NumVehicles\' and then restart')
-
         LOGGER.debug('Done checking: API_KEY = {}'.format(self.API_KEY))
 
         # Make sure they are in the params
-        self.addCustomParam({'DebugLevel': self.DebugLevel, 'API_KEY': self.API_KEY, 'NumVehicles': self.NumVehicles})
+        self.addCustomParam({'DebugLevel': self.DebugLevel, 'API_KEY': self.API_KEY})
 
     def remove_notice_test(self,command):
         LOGGER.info('remove_notice_test: notices={}'.format(self.poly.config['notices']))
@@ -225,7 +206,42 @@ class Controller(polyinterface.Controller):
         LOGGER.setLevel(self.DebugLevel)
 
         # Make sure they are in the params
-        self.addCustomParam({'DebugLevel': self.DebugLevel, 'API_KEY': self.API_KEY, 'NumVehicles': self.NumVehicles})
+        self.addCustomParam({'DebugLevel': self.DebugLevel, 'API_KEY': self.API_KEY})
+
+    def wake(self, command=None):
+       LOGGER.debug("**** WAKE!!! ******");
+       LOGGER.debug('command = {}'.format(command))
+       url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f&command=wake_up'
+       LOGGER.info('waking via TeslaFi API @ {}'.format(url))
+       r = requests.get(url)
+       LOGGER.debug('r = {}'.format(r))
+       LOGGER.debug("**** WAKE!!! ******");
+
+    def honk(self, command=None):
+       LOGGER.debug("**** HONK!!! ******");
+       LOGGER.debug('command = {}'.format(command))
+       url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f&command=honk'
+       LOGGER.info('honking via TeslaFi API @ {}'.format(url))
+       r = requests.get(url)
+       LOGGER.debug('r = {}'.format(r))
+       LOGGER.debug("**** HONK!!! ******");
+
+    def flash(self, command=None):
+       LOGGER.debug('command = {}'.format(command))
+       url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f&command=flash_lights'
+       LOGGER.info('flashing indicators via TeslaFi API @ {}'.format(url))
+       r = requests.get(url)
+       LOGGER.debug('r = {}'.format(r))
+
+    def set_charge_level(self, command=None):
+       LOGGER.debug('command = {}'.format(command))
+       chargeLimit = command['value']
+       LOGGER.debug('chargeLimit = {}'.format(chargeLimit))
+       url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f&command=set_charge_limit&charge_limit_soc='+chargeLimit
+       LOGGER.info('setting charge level via TeslaFi API @ {}'.format(url))
+       # r = requests.get(url)
+       # LOGGER.debug('r = {}'.format(r))
+       self.setDriver('GV3', chargeLimit)
 
     id = 'controller'
     commands = {
@@ -237,78 +253,14 @@ class Controller(polyinterface.Controller):
         'SET_DEBUG_LEVEL': set_debug_level
     }
     drivers = [{'driver': 'ST',  'value': 0, 'uom': 2},
-               {'driver': 'GV1', 'value': 0, 'uom': 25}]
-
-
-class VehicleNode(polyinterface.Node):
-    def __init__(self, controller, primary, address, name):
-        super(VehicleNode, self).__init__(controller, primary, address, name)
-
-    def start(self):
-        pass
-
-    def shortPoll(self):
-        LOGGER.debug('VehicleNode - shortPoll')
-
-    def longPoll(self):
-        LOGGER.debug('VehicleNode - longPoll')
-
-    def setOn(self, command):
-        self.setDriver('ST', 1)
-
-    def setOff(self, command):
-        self.setDriver('ST', 0)
-
-    def query(self,command=None):
-        self.reportDrivers()
-
-    def wake(self, command=None):
-        LOGGER.debug("**** WAKE!!! ******");
-        LOGGER.debug('command = {}'.format(command))
-        url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f&command=wake_up'
-        LOGGER.info('waking via TeslaFi API @ {}'.format(url))
-        r = requests.get(url)
-        LOGGER.debug('r = {}'.format(r))
-        LOGGER.debug("**** WAKE!!! ******");
-
-    def honk(self, command=None):
-        LOGGER.debug("**** HONK!!! ******");
-        LOGGER.debug('command = {}'.format(command))
-        url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f&command=honk'
-        LOGGER.info('honking via TeslaFi API @ {}'.format(url))
-        r = requests.get(url)
-        LOGGER.debug('r = {}'.format(r))
-        LOGGER.debug("**** HONK!!! ******");
-
-    def flash(self, command=None):
-        LOGGER.debug('command = {}'.format(command))
-        url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f&command=flash_lights'
-        LOGGER.info('flashing indicators via TeslaFi API @ {}'.format(url))
-        r = requests.get(url)
-        LOGGER.debug('r = {}'.format(r))
-
-    def set_charge_level(self, command=None):
-        LOGGER.debug('command = {}'.format(command))
-        chargeLimit = command['value']
-        LOGGER.debug('chargeLimit = {}'.format(chargeLimit))
-        url = 'https://www.teslafi.com/feed.php?token=44079b782955333d8436b36f6272ab0f&command=set_charge_limit&charge_limit_soc='+chargeLimit
-        LOGGER.info('setting charge level via TeslaFi API @ {}'.format(url))
-        # r = requests.get(url)
-        # LOGGER.debug('r = {}'.format(r))
-        self.setDriver('GV3', chargeLimit)
-
-    # hint = [1,2,3,4]
-    drivers = [
-        {'driver':  'ST', 'value': 0, 'uom': 2},
-        {'driver': 'GV0', 'value': 0, 'uom': 25},
-        {'driver': 'GV1', 'value': 0, 'uom': 51},
-        {'driver': 'GV2', 'value': 0, 'uom': 116},
-        {'driver': 'GV3', 'value': 0, 'uom': 51},
-        {'driver': 'GV4', 'value': 0, 'uom': 116},
+               {'driver': 'GV0', 'value': 0, 'uom': 25},
+               {'driver': 'GV1', 'value': 0, 'uom': 51},
+               {'driver': 'GV2', 'value': 0, 'uom': 116},
+               {'driver': 'GV3', 'value': 0, 'uom': 51},
+               {'driver': 'GV4', 'value': 0, 'uom': 116},
     ]
     id = 'vehiclenode'
     commands = {
-        'DON': setOn, 'DOF' : setOff,
         'WAKE': wake,
         'HONK': honk,
         'FLASH': flash,
